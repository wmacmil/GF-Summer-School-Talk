\frametitle{BNFC $\to$ GF}

\begin{itemize}
\item Backus-Naur form Converter (BNFC)
\item Parser generator for PL's
\item A cousin of GF for that combines the concrete and abstract into a single grammar file.
\item The BNFC functions are quite similar, but resembles classic BNF
\item Precedence is native in BNFC
\item We have help from Formal.gf in the RGL.
\end{itemize}

\begin{verbatim}
Lam. Exp  ::= "\\" [PTele] "->" Exp ;
Fun. Exp1 ::= Exp2 "->" Exp1 ;
App. Exp2 ::= Exp2 Exp3 ;
\end{verbatim}

\begin{verbatim}
fun
  Lam : [Tele] -> Exp -> Exp ;
  Fun : Exp -> Exp -> Exp ;
  App : Exp -> Exp -> Exp ;
lin
  Lam pt e = mkPrec 0 ("\\" ++ pt ++ "->" ++ usePrec 0 e) ;
  Fun = infixr 1 "->" ;
  App = infixl 2 "" ;
\end{verbatim}
